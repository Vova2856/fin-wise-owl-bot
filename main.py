import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    ConversationHandler
)
from dotenv import load_dotenv
from sqlalchemy import create_engine
from sqlalchemy.sql import text as sql_text
from sqlalchemy.orm import sessionmaker
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot.log")
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è ConversationHandler
BUDGET_MENU, ADDING_EXPENSE, SETTING_BUDGET, AI_SESSION = range(4)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DB_URL = os.getenv("DB_URL", "sqlite:///finance_bot.db")
engine = create_engine(DB_URL)
Session = sessionmaker(bind=engine)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
with engine.connect() as conn:
    conn.execute(sql_text("""
    CREATE TABLE IF NOT EXISTS transactions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        amount REAL NOT NULL,
        category TEXT NOT NULL,
        date TEXT NOT NULL
    )
    """))
    conn.execute(sql_text("""
    CREATE TABLE IF NOT EXISTS budgets (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        category TEXT NOT NULL,
        "limit" REAL NOT NULL
    )
    """))
    conn.commit()

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def build_main_keyboard():
    keyboard = [
        [KeyboardButton("üí∞ –ë—é–¥–∂–µ—Ç"), KeyboardButton("ü§ñ AI –ü–æ—Ä–∞–¥–∏")],
        [KeyboardButton("üéØ –¶—ñ–ª—ñ"), KeyboardButton("üìä –ê–Ω–∞–ª—ñ–∑")],
        [KeyboardButton("‚ûï –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è"), KeyboardButton("‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def build_budget_keyboard():
    keyboard = [
        ["‚ûï –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
        ["‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É", "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def build_ai_keyboard():
    keyboard = [[KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∏
async def cmd_start(update: Update, context: CallbackContext):
    user_first_name = update.effective_user.first_name or "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"
    welcome_msg = f"""ü¶â <b>–ü—Ä–∏–≤—ñ—Ç, {user_first_name}!</b>

–Ø ‚Äî <b>FinWise Owl</b>, –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ —É —Å–≤—ñ—Ç—ñ —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤."""
    await update.message.reply_text(
        text=welcome_msg,
        reply_markup=build_main_keyboard(),
        parse_mode="HTML"
    )

async def cmd_help(update: Update, context: CallbackContext):
    help_msg = """‚ÑπÔ∏è <b>–î–æ–≤—ñ–¥–∫–∞:</b>"""
    await update.message.reply_text(help_msg, parse_mode="HTML")

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
async def handle_goals(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üéØ <b>–†–æ–∑–¥—ñ–ª —Ü—ñ–ª–µ–π</b>\n–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—ó–º–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–º–∏ —Ü—ñ–ª—è–º–∏",
        parse_mode="HTML"
    )

async def handle_analytics(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üìä <b>–†–æ–∑–¥—ñ–ª –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏</b>\n–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É –≤–∏—Ç—Ä–∞—Ç",
        parse_mode="HTML"
    )

async def handle_transaction(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "‚ûï <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó</b>\n–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ: <code>100 —ó–∂–∞</code>",
        parse_mode="HTML"
    )

async def handle_settings(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "‚öô <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>\n–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å",
        parse_mode="HTML"
    )

# AI –ü–æ—Ä–∞–¥–∏
async def handle_ai_advice(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üí° –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Ñ—ñ–Ω–∞–Ω—Å–∏:",
        reply_markup=build_ai_keyboard()
    )
    return AI_SESSION

async def handle_ai_question(update: Update, context: CallbackContext):
    from handlers.ai import handle_ai_question as ai_handler
    return await ai_handler(update, context)

async def cancel_conversation(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
        reply_markup=build_main_keyboard()
    )
    return ConversationHandler.END

# –ë—é–¥–∂–µ—Ç - ConversationHandler
async def budget_start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üí∞ <b>–†–æ–∑–¥—ñ–ª –±—é–¥–∂–µ—Ç—É</b>\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=build_budget_keyboard(),
        parse_mode="HTML"
    )
    return BUDGET_MENU

async def add_expense_start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å –≤–∏—Ç—Ä–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n<code>100 —ó–∂–∞</code> –∞–±–æ <code>200 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç</code>\n"
        "–ê–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '—Å–∫–∞—Å—É–≤–∞—Ç–∏' –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è",
        parse_mode="HTML"
    )
    return ADDING_EXPENSE

async def add_expense(update: Update, context: CallbackContext):
    try:
        user_input = update.message.text
        if user_input.lower() == '—Å–∫–∞—Å—É–≤–∞—Ç–∏':
            await cancel_conversation(update, context)
            return ConversationHandler.END

        parts = user_input.split()
        if len(parts) < 2:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö")
            
        amount = float(parts[0])
        category = ' '.join(parts[1:]).lower()

        session = Session()
        session.execute(
            sql_text("""
                INSERT INTO transactions (user_id, amount, category, date) 
                VALUES (:user_id, :amount, :category, :date)
            """),
            {
                "user_id": update.effective_user.id,
                "amount": amount,
                "category": category,
                "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
        )
        session.commit()
        
        await update.message.reply_text(
            f"‚úÖ –í–∏—Ç—Ä–∞—Ç—É {amount} –≥—Ä–Ω –Ω–∞ '{category}' –¥–æ–¥–∞–Ω–æ!",
            reply_markup=build_budget_keyboard()
        )
        return BUDGET_MENU

    except ValueError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <code>100 —ó–∂–∞</code>",
            parse_mode="HTML"
        )
        return ADDING_EXPENSE
    except Exception as e:
        logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        await update.message.reply_text(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=build_budget_keyboard()
        )
        return BUDGET_MENU

async def show_statistics(update: Update, context: CallbackContext):
    try:
        session = Session()
        user_id = update.effective_user.id
        current_month = datetime.now().strftime("%Y-%m")
        
        transactions = session.execute(
            sql_text("""
                SELECT category, SUM(amount) as total FROM transactions 
                WHERE user_id = :user_id AND strftime('%Y-%m', date) = :month 
                GROUP BY category
            """),
            {"user_id": user_id, "month": current_month}
        ).fetchall()

        if not transactions:
            await update.message.reply_text(
                "üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –∑–∞ —Ü–µ–π –º—ñ—Å—è—Ü—å.",
                reply_markup=build_budget_keyboard()
            )
            return BUDGET_MENU

        total = sum(t.total for t in transactions)
        message = "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å:</b>\n\n"
        message += f"üíµ –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {total:.2f} –≥—Ä–Ω\n\n"
        message += "<b>–ó–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏:</b>\n"
        
        for t in transactions:
            percentage = (t.total / total) * 100
            message += f"‚ñ™ {t.category.capitalize()}: {t.total:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"

        await update.message.reply_text(
            message,
            reply_markup=build_budget_keyboard(),
            parse_mode="HTML"
        )
        return BUDGET_MENU

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=build_budget_keyboard()
        )
        return BUDGET_MENU

async def budget_settings_start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "‚öô <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –ª—ñ–º—ñ—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n<code>–∫–∞—Ç–µ–≥–æ—Ä—ñ—è –ª—ñ–º—ñ—Ç</code>\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>—ó–∂–∞ 3000</code>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –ª—ñ–º—ñ—Ç–∏\n"
        "/cancel - —Å–∫–∞—Å—É–≤–∞—Ç–∏",
        parse_mode="HTML"
    )
    return SETTING_BUDGET

async def handle_budget_settings(update: Update, context: CallbackContext):
    try:
        user_input = update.message.text
        
        if user_input.lower() == '—Å–∫–∞—Å—É–≤–∞—Ç–∏':
            await cancel_conversation(update, context)
            return ConversationHandler.END
            
        if user_input.lower() == '/list':
            session = Session()
            budgets = session.execute(
                sql_text("SELECT category, \"limit\" FROM budgets WHERE user_id = :user_id"),
                {"user_id": update.effective_user.id}
            ).fetchall()
            
            if not budgets:
                await update.message.reply_text(
                    "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö –ª—ñ–º—ñ—Ç—ñ–≤.",
                    reply_markup=build_budget_keyboard()
                )
                return SETTING_BUDGET
                
            message = "üìã <b>–í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –ª—ñ–º—ñ—Ç–∏:</b>\n"
            for budget in budgets:
                message += f"‚ñ™ {budget.category}: {budget.limit} –≥—Ä–Ω\n"
                
            await update.message.reply_text(
                message,
                reply_markup=build_budget_keyboard(),
                parse_mode="HTML"
            )
            return SETTING_BUDGET

        category, limit = user_input.split(maxsplit=1)
        limit = float(limit)
        
        session = Session()
        session.execute(
            sql_text("""
                INSERT INTO budgets (user_id, category, "limit") 
                VALUES (:user_id, :category, :limit)
                ON CONFLICT(user_id, category) DO UPDATE SET "limit" = :limit
            """),
            {
                "user_id": update.effective_user.id,
                "category": category.lower(),
                "limit": limit
            }
        )
        session.commit()
        
        await update.message.reply_text(
            f"‚úÖ –õ—ñ–º—ñ—Ç –¥–ª—è '{category}' –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {limit} –≥—Ä–Ω",
            reply_markup=build_budget_keyboard()
        )
        return BUDGET_MENU

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <code>—ó–∂–∞ 3000</code>",
            parse_mode="HTML"
        )
        return SETTING_BUDGET
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –±—é–¥–∂–µ—Ç—É: {e}")
        await update.message.reply_text(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=build_budget_keyboard()
        )
        return SETTING_BUDGET

def setup_handlers(application: Application):
    # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler("help", cmd_help))
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    application.add_handler(MessageHandler(filters.Text(["üéØ –¶—ñ–ª—ñ"]), handle_goals))
    application.add_handler(MessageHandler(filters.Text(["üìä –ê–Ω–∞–ª—ñ–∑"]), handle_analytics))
    application.add_handler(MessageHandler(filters.Text(["‚ûï –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è"]), handle_transaction))
    application.add_handler(MessageHandler(filters.Text(["‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"]), handle_settings))
    
    # –û–±—Ä–æ–±–Ω–∏–∫ –±—é–¥–∂–µ—Ç—É
    budget_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Text(["üí∞ –ë—é–¥–∂–µ—Ç"]), budget_start),
            CommandHandler("budget", budget_start)
        ],
        states={
            BUDGET_MENU: [
                MessageHandler(filters.Text(["‚ûï –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É"]), add_expense_start),
                MessageHandler(filters.Text(["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]), show_statistics),
                MessageHandler(filters.Text(["‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É"]), budget_settings_start),
                MessageHandler(filters.Text(["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]), cancel_conversation)
            ],
            ADDING_EXPENSE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_expense)
            ],
            SETTING_BUDGET: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_budget_settings),
                CommandHandler("list", handle_budget_settings)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_conversation),
            MessageHandler(filters.Text(["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]), cancel_conversation)
        ]
    )
    application.add_handler(budget_handler)
    
    # –û–±—Ä–æ–±–Ω–∏–∫ AI
    ai_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Text(["ü§ñ AI –ü–æ—Ä–∞–¥–∏"]), handle_ai_advice)],
        states={
            AI_SESSION: [
                MessageHandler(filters.TEXT & ~filters.Text(["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]), handle_ai_question),
                MessageHandler(filters.Text(["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]), cancel_conversation)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_conversation),
            MessageHandler(filters.Text(["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]), cancel_conversation)
        ]
    )
    application.add_handler(ai_handler)

def main():
    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        raise ValueError("–ù–µ –≤–∫–∞–∑–∞–Ω–æ TELEGRAM_TOKEN")
    
    application = Application.builder().token(token).build()
    setup_handlers(application)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    application.run_polling()

if __name__ == "__main__":
    main()