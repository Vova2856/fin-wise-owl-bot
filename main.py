import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    ConversationHandler
)
from dotenv import load_dotenv
from sqlalchemy.orm import Session # –ó–º—ñ–Ω–µ–Ω–æ: —ñ–º–ø–æ—Ä—Ç—É—î–º–æ Session –Ω–∞–ø—Ä—è–º—É, –Ω–µ —Å—Ç–≤–æ—Ä—é—î–º–æ engine —Ç—É—Ç
from datetime import datetime

# Import the new ai module (assuming it's in a 'handlers' directory)
import handlers.ai as ai
import handlers.settings as settings

# Import your database and transactions modules
from database import init_db, User, Transaction, Budget, Goal, engine, Session as DBSession # –Ü–º–ø–æ—Ä—Ç Session —è–∫ DBSession, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É —ñ–º–µ–Ω –∑ telegram.ext
import handlers.transactions as db_transactions # –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot.log")
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è ConversationHandler
# –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ —Å—Ç–∞–Ω–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
ADD_TRANSACTION_TYPE, ADD_TRANSACTION_AMOUNT, ADD_TRANSACTION_CATEGORY, ADD_TRANSACTION_DESCRIPTION = range(5, 9) # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ 5
BUDGET_MENU, ADDING_EXPENSE, SETTING_BUDGET, AI_SESSION, GOAL_MENU = range(5) # –°—Ç–∞—Ä—ñ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ (–æ–¥–∏–Ω —Ä–∞–∑)
# –í–ò–î–ê–õ–ï–ù–û —Ä—É—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é sql_text
# –¢–µ–ø–µ—Ä —Ü–µ —Ä–æ–±–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ database.py -> init_db()
init_db()

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def build_main_keyboard():
    keyboard = [
        [KeyboardButton("üí∞ –ë—é–¥–∂–µ—Ç"), KeyboardButton("ü§ñ AI –ü–æ—Ä–∞–¥–∏")],
        [KeyboardButton("üéØ –¶—ñ–ª—ñ"), KeyboardButton("üìä –ê–Ω–∞–ª—ñ–∑")],
        [KeyboardButton("‚ûï –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è"), KeyboardButton("‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def build_transaction_type_keyboard():
    keyboard = [
        [KeyboardButton("–î–æ—Ö—ñ–¥"), KeyboardButton("–í–∏—Ç—Ä–∞—Ç–∞")],
        [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def build_budget_keyboard():
    keyboard = [
        ["‚ûï –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
        ["‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É", "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def build_ai_keyboard():
    keyboard = [[KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def build_goals_keyboard():
    keyboard = [
        ["üìã –°–ø–∏—Å–æ–∫ —Ü—ñ–ª–µ–π", "‚ûï –ù–æ–≤–∞ —Ü—ñ–ª—å"],
        ["üí∞ –î–æ–¥–∞—Ç–∏ –∫–æ—à—Ç–∏", "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ü—ñ–ª—å"],
        ["üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∏
async def cmd_start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    username = update.effective_user.username
    first_name = update.effective_user.first_name
    last_name = update.effective_user.last_name
    language_code = update.effective_user.language_code

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î
    await db_transactions.get_or_create_user(user_id, username, first_name, last_name, language_code)

    user_first_name = update.effective_user.first_name or "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"
    welcome_msg = f"""ü¶â <b>–ü—Ä–∏–≤—ñ—Ç, {user_first_name}!</b>

–Ø ‚Äî <b>FinWise Owl</b>, –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ —É —Å–≤—ñ—Ç—ñ —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤.

üîπ –í–µ–¥—ñ—Ç—å –æ–±–ª—ñ–∫ –≤–∏—Ç—Ä–∞—Ç
üîπ –ê–Ω–∞–ª—ñ–∑—É–π—Ç–µ —Å–≤–æ—ó —Ñ—ñ–Ω–∞–Ω—Å–∏
üîπ –î–æ—Å—è–≥–∞–π—Ç–µ —Ü—ñ–ª–µ–π
üîπ –û—Ç—Ä–∏–º—É–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø–æ—Ä–∞–¥–∏"""
    await update.message.reply_text(
        text=welcome_msg,
        reply_markup=build_main_keyboard(),
        parse_mode="HTML"
    )

async def cmd_help(update: Update, context: CallbackContext):
    help_msg = """‚ÑπÔ∏è <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>

<b>–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>
/start - –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏
/help - –î–æ–≤—ñ–¥–∫–∞
/analytics - –§—ñ–Ω–∞–Ω—Å–æ–≤–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞

<b>–ë—é–¥–∂–µ—Ç:</b>
/budget - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±—é–¥–∂–µ—Ç–æ–º
/add_expense - –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É

<b>–¶—ñ–ª—ñ:</b>
/goals - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ü—ñ–ª—è–º–∏
/goal_create - –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —Ü—ñ–ª—å

<b>AI –ü–æ—Ä–∞–¥–∏:</b>
/advice - –û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –ø–æ—Ä–∞–¥–∏"""
    await update.message.reply_text(help_msg, parse_mode="HTML")

# --- –§–£–ù–ö–¶–Ü–û–ù–ê–õ –¢–†–ê–ù–ó–ê–ö–¶–Ü–ô ---

async def handle_transaction_start(update: Update, context: CallbackContext):
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: –∑–∞–ø–∏—Ç—É—î–º–æ —Ç–∏–ø."""
    user_id = update.effective_user.id
    username = update.effective_user.username
    first_name = update.effective_user.first_name
    last_name = update.effective_user.last_name
    language_code = update.effective_user.language_code
    await db_transactions.get_or_create_user(user_id, username, first_name, last_name, language_code) # Ensure user exists

    await update.message.reply_text(
        "‚ûï <b>–Ø–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏?</b>",
        reply_markup=build_transaction_type_keyboard(),
        parse_mode="HTML"
    )
    return ADD_TRANSACTION_TYPE

async def get_transaction_type(update: Update, context: CallbackContext):
    """–û—Ç—Ä–∏–º—É—î–º–æ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó (–¥–æ—Ö—ñ–¥/–≤–∏—Ç—Ä–∞—Ç–∞)."""
    text = update.message.text
    if text.lower() == "–¥–æ—Ö—ñ–¥":
        context.user_data['transaction_type'] = 'income'
    elif text.lower() == "–≤–∏—Ç—Ä–∞—Ç–∞":
        context.user_data['transaction_type'] = 'expense'
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å '–î–æ—Ö—ñ–¥' –∞–±–æ '–í–∏—Ç—Ä–∞—Ç–∞'.")
        return ADD_TRANSACTION_TYPE

    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, <code>100.50</code>):", parse_mode="HTML")
    return ADD_TRANSACTION_AMOUNT

async def get_transaction_amount(update: Update, context: CallbackContext):
    """–û—Ç—Ä–∏–º—É—î–º–æ —Å—É–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó."""
    try:
        amount = float(update.message.text.replace(',', '.')) # –î–æ–∑–≤–æ–ª—è—î–º–æ –∫–æ–º—É —è–∫ –¥–µ—Å—è—Ç–∫–æ–≤–∏–π —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫
        if amount <= 0:
            await update.message.reply_text("–°—É–º–∞ –º–∞—î –±—É—Ç–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return ADD_TRANSACTION_AMOUNT
        context.user_data['amount'] = amount
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, <code>–á–∂–∞</code>, <code>–ó–∞—Ä–ø–ª–∞—Ç–∞</code>):", parse_mode="HTML")
        return ADD_TRANSACTION_CATEGORY
    except ValueError:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <code>100</code> –∞–±–æ <code>50.75</code>", parse_mode="HTML")
        return ADD_TRANSACTION_AMOUNT

async def get_transaction_category(update: Update, context: CallbackContext):
    """–û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó."""
    category = update.message.text.strip()
    if not category:
        await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–æ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return ADD_TRANSACTION_CATEGORY
    context.user_data['category'] = category
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó (–∞–±–æ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', —è–∫—â–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ):")
    return ADD_TRANSACTION_DESCRIPTION


async def get_transaction_description(update: Update, context: CallbackContext):
    description = update.message.text.strip()
    if description.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':
        description = None

    user_id = update.effective_user.id
    transaction_type = context.user_data['transaction_type']
    amount = context.user_data['amount']
    category = context.user_data['category']

    success = await db_transactions.add_transaction(
        user_id=user_id,
        amount=amount,
        transaction_type=transaction_type,
        category=category,
        description=description
    )

    if success:
        reply_text = f"‚úÖ {transaction_type.capitalize()} {amount} –≥—Ä–Ω –Ω–∞ '{category}' –¥–æ–¥–∞–Ω–æ!"
        if description:
            reply_text += f"\nüìù –û–ø–∏—Å: {description}"
    else:
        reply_text = "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó."

    await update.message.reply_text(reply_text, reply_markup=build_main_keyboard())
    
    # Clear user data
    context.user_data.clear()
    return ConversationHandler.END

# –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏
async def cancel_conversation(update: Update, context: CallbackContext):
    # –û—á–∏—â–∞—î–º–æ –≤—Å—ñ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –≤–æ–Ω–∏ —î
    context.user_data.clear()
    await update.message.reply_text(
        "–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
        reply_markup=build_main_keyboard()
    )
    return ConversationHandler.END

# --- –Ü–Ω—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ ---
async def handle_settings(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "‚öô <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>\n–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó:\n"
        "üî∏ –ó–º—ñ–Ω–∏—Ç–∏ –≤–∞–ª—é—Ç—É\n"
        "üî∏ –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è\n"
        "üî∏ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö",
        parse_mode="HTML"
    )

# AI –ü–æ—Ä–∞–¥–∏
async def handle_ai_advice(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üí° –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Ñ—ñ–Ω–∞–Ω—Å–∏:",
        reply_markup=build_ai_keyboard()
    )
    return AI_SESSION

# –ë—é–¥–∂–µ—Ç - ConversationHandler
async def budget_start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    username = update.effective_user.username
    first_name = update.effective_user.first_name
    last_name = update.effective_user.last_name
    language_code = update.effective_user.language_code
    await db_transactions.get_or_create_user(user_id, username, first_name, last_name, language_code)

    await update.message.reply_text(
        "üí∞ <b>–†–æ–∑–¥—ñ–ª –±—é–¥–∂–µ—Ç—É</b>\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=build_budget_keyboard(),
        parse_mode="HTML"
    )
    return BUDGET_MENU

# –û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ORM:
async def add_expense_start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å –≤–∏—Ç—Ä–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n<code>100 —ó–∂–∞</code> –∞–±–æ <code>200 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –æ–±—ñ–¥</code>\n"
        "–ê–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '—Å–∫–∞—Å—É–≤–∞—Ç–∏' –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è",
        parse_mode="HTML"
    )
    return ADDING_EXPENSE

# –û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ORM:
async def add_expense(update: Update, context: CallbackContext):
    try:
        user_input = update.message.text
        if user_input.lower() == '—Å–∫–∞—Å—É–≤–∞—Ç–∏':
            await cancel_conversation(update, context)
            return ConversationHandler.END

        parts = user_input.split(maxsplit=2)
        if len(parts) < 2:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö")
            
        amount = float(parts[0].replace(',', '.'))
        category = parts[1].lower()
        description = parts[2] if len(parts) > 2 else None

        success = await db_transactions.add_transaction(
            user_id=update.effective_user.id,
            amount=amount,
            transaction_type='expense',
            category=category,
            description=description
        )
        
        if success:
            reply_text = f"‚úÖ –í–∏—Ç—Ä–∞—Ç—É {amount} –≥—Ä–Ω –Ω–∞ '{category}' –¥–æ–¥–∞–Ω–æ!"
            if description:
                reply_text += f"\nüìù –û–ø–∏—Å: {description}"
            await update.message.reply_text(reply_text, reply_markup=build_budget_keyboard())
            return BUDGET_MENU
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏.", reply_markup=build_budget_keyboard())
            return BUDGET_MENU

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å: <code>100 —ó–∂–∞</code> –∞–±–æ <code>200 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –æ–±—ñ–¥</code>",
            parse_mode="HTML"
        )
        return ADDING_EXPENSE
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        await update.message.reply_text(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=build_budget_keyboard()
        )
        return BUDGET_MENU
# –û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ORM:
async def show_statistics(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        transactions_list = await db_transactions.get_transactions(user_id, limit=9999) # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

        if not transactions_list:
            await update.message.reply_text(
                "üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π.",
                reply_markup=build_budget_keyboard()
            )
            return BUDGET_MENU

        # –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ –¥–æ—Ö–æ–¥–∏ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–∏ –¥–ª—è –±—ñ–ª—å—à —Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É
        total_income = sum(t.amount for t in transactions_list if t.type == 'income')
        total_expense = sum(t.amount for t in transactions_list if t.type == 'expense')
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ñ—É–Ω–∫—Ü—ñ—ó
        current_balance = await db_transactions.get_balance(user_id)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è
        monthly_expenses_by_category = {}
        current_month_str = datetime.now().strftime("%Y-%m")

        for t in transactions_list:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è —ñ —î –≤–∏—Ç—Ä–∞—Ç–æ—é
            if t.date.strftime("%Y-%m") == current_month_str and t.type == 'expense':
                monthly_expenses_by_category[t.category] = monthly_expenses_by_category.get(t.category, 0.0) + t.amount
        
        # –°–æ—Ä—Ç—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ –≤–∏—Ç—Ä–∞—Ç–∞–º–∏
        sorted_categories = sorted(monthly_expenses_by_category.items(), key=lambda item: item[1], reverse=True)
        total_monthly_expense = sum(monthly_expenses_by_category.values())

        message = "üìä <b>–í–∞—à–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        message += f"üí∞ <b>–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:</b> {current_balance:.2f} –≥—Ä–Ω\n"
        message += f"‚¨ÜÔ∏è <b>–í—Å—å–æ–≥–æ –¥–æ—Ö–æ–¥—ñ–≤:</b> {total_income:.2f} –≥—Ä–Ω\n"
        message += f"‚¨áÔ∏è <b>–í—Å—å–æ–≥–æ –≤–∏—Ç—Ä–∞—Ç:</b> {total_expense:.2f} –≥—Ä–Ω\n\n"
        
        if sorted_categories:
            message += f"<b>–í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ {datetime.now().strftime('%B %Y').capitalize()}:</b>\n"
            message += f"üíµ <b>–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è:</b> {total_monthly_expense:.2f} –≥—Ä–Ω\n\n"
            message += "<b>–ó–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è:</b>\n"
            for category, amount in sorted_categories:
                percentage = (amount / total_monthly_expense) * 100 if total_monthly_expense > 0 else 0
                message += f"‚ñ™ {category.capitalize()}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
        else:
            message += "üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –∑–∞ —Ü–µ–π –º—ñ—Å—è—Ü—å.\n"

        await update.message.reply_text(
            message,
            reply_markup=build_budget_keyboard(),
            parse_mode="HTML"
        )
        return BUDGET_MENU

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=build_budget_keyboard()
        )
        return BUDGET_MENU

# –û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ORM:
async def budget_settings_start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    username = update.effective_user.username
    first_name = update.effective_user.first_name
    last_name = update.effective_user.last_name
    language_code = update.effective_user.language_code
    await db_transactions.get_or_create_user(user_id, username, first_name, last_name, language_code)

    await update.message.reply_text(
        "‚öô <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –ª—ñ–º—ñ—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n<code>–∫–∞—Ç–µ–≥–æ—Ä—ñ—è –ª—ñ–º—ñ—Ç</code>\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>—ó–∂–∞ 3000</code>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –ª—ñ–º—ñ—Ç–∏\n"
        "/cancel - —Å–∫–∞—Å—É–≤–∞—Ç–∏",
        parse_mode="HTML"
    )
    return SETTING_BUDGET

# –û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ORM:
async def handle_budget_settings(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    try:
        user_input = update.message.text
        
        if user_input.lower() == '—Å–∫–∞—Å—É–≤–∞—Ç–∏' or user_input.lower() == '/cancel':
            await cancel_conversation(update, context)
            return ConversationHandler.END
            
        if user_input.lower() == '/list':
            session = DBSession() # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ DBSession –∑ database.py
            budgets = session.query(Budget).filter_by(user_id=user_id).all()
            session.close()
            
            if not budgets:
                await update.message.reply_text(
                    "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö –ª—ñ–º—ñ—Ç—ñ–≤.",
                    reply_markup=build_budget_keyboard()
                )
                return SETTING_BUDGET
                
            message = "üìã <b>–í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –ª—ñ–º—ñ—Ç–∏:</b>\n"
            for budget in budgets:
                message += f"‚ñ™ {budget.category}: {budget.limit} –≥—Ä–Ω\n"
                
            await update.message.reply_text(
                message,
                reply_markup=build_budget_keyboard(),
                parse_mode="HTML"
            )
            return SETTING_BUDGET

        parts = user_input.split(maxsplit=1)
        if len(parts) < 2:
            raise ValueError("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–∞ –ª—ñ–º—ñ—Ç.")
        
        category = parts[0].lower()
        limit = float(parts[1])
        
        session = DBSession()
        # –®—É–∫–∞—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –±—é–¥–∂–µ—Ç –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
        budget = session.query(Budget).filter_by(user_id=user_id, category=category).first()
        if budget:
            budget.limit = limit
            session.add(budget) # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–∏–π
            action_msg = "–æ–Ω–æ–≤–ª–µ–Ω–æ"
        else:
            budget = Budget(user_id=user_id, category=category, limit=limit)
            session.add(budget) # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π
            action_msg = "–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

        session.commit()
        session.close()
        
        await update.message.reply_text(
            f"‚úÖ –õ—ñ–º—ñ—Ç –¥–ª—è '{category}' {action_msg} –Ω–∞ {limit} –≥—Ä–Ω",
            reply_markup=build_budget_keyboard()
        )
        return BUDGET_MENU

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <code>—ó–∂–∞ 3000</code>",
            parse_mode="HTML"
        )
        return SETTING_BUDGET
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –±—é–¥–∂–µ—Ç—É: {e}")
        await update.message.reply_text(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=build_budget_keyboard()
        )
        return BUDGET_MENU

# –û–±—Ä–æ–±–Ω–∏–∫ —Ü—ñ–ª–µ–π (–æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ORM)
async def handle_goals(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    username = update.effective_user.username
    first_name = update.effective_user.first_name
    last_name = update.effective_user.last_name
    language_code = update.effective_user.language_code
    await db_transactions.get_or_create_user(user_id, username, first_name, last_name, language_code)

    await update.message.reply_text(
        "üéØ <b>–†–æ–∑–¥—ñ–ª —Ü—ñ–ª–µ–π</b>\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=build_goals_keyboard(),
        parse_mode="HTML"
    )
    return GOAL_MENU

# –û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ORM:
async def goal_list(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    session = DBSession()
    try:
        goals = session.query(Goal).filter_by(user_id=user_id).all()

        if not goals:
            await update.message.reply_text("üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Ü—ñ–ª–µ–π", reply_markup=build_goals_keyboard())
            return GOAL_MENU

        response = "üéØ <b>–í–∞—à—ñ —Ü—ñ–ª—ñ:</b>\n\n"
        for goal in goals:
            progress = (goal.current_amount / goal.target_amount) * 100 if goal.target_amount > 0 else 0
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º—ñ—Å—è—á–Ω–æ—ó —Å—É–º–∏ –ª–∏—à–µ —è–∫—â–æ —Ç–µ—Ä–º—ñ–Ω —É –º—ñ—Å—è—Ü—è—Ö –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —ñ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π
            monthly = (goal.target_amount - goal.current_amount) / goal.months if goal.months and goal.months > 0 else 0
            
            response += (
                f"üÜî <b>ID:</b> {goal.id}\n"
                f"üìå <b>–ù–∞–∑–≤–∞:</b> {goal.name}\n"
                f"üíµ <b>–¶—ñ–ª—å:</b> {goal.target_amount} –≥—Ä–Ω\n"
                f"üí∞ <b>–ù–∞–∫–æ–ø–∏—á–µ–Ω–æ:</b> {goal.current_amount} –≥—Ä–Ω ({progress:.1f}%)\n"
            )
            if goal.months and goal.months > 0:
                 response += f"üìÖ <b>–ú—ñ—Å—è—á–Ω–∞ —Å—É–º–∞:</b> ~{monthly:.2f} –≥—Ä–Ω\n"
            if goal.description:
                response += f"üìù <b>–û–ø–∏—Å:</b> {goal.description}\n"
            response += f"------------------------\n"

        await update.message.reply_text(response, parse_mode="HTML", reply_markup=build_goals_keyboard())
        return GOAL_MENU

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É —Ü—ñ–ª–µ–π: {e}")
        await update.message.reply_text(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É —Ü—ñ–ª–µ–π.",
            reply_markup=build_goals_keyboard()
        )
        return GOAL_MENU
    finally:
        session.close()

async def goal_create_prompt(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üìå –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ü—ñ–ª—ñ, —Ü—ñ–ª—å–æ–≤—É —Å—É–º—É —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—è—Ü—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "<code>–ù–∞–∑–≤–∞ –°—É–º–∞ –ú—ñ—Å—è—Ü—ñ [–û–ø–∏—Å]</code>\n\n" # –î–æ–¥–∞–Ω–æ [–û–ø–∏—Å] –¥–ª—è —è—Å–Ω–æ—Å—Ç—ñ
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>–ù–æ—É—Ç–±—É–∫ 25000 6 –¥–ª—è —Ä–æ–±–æ—Ç–∏</code>",
        parse_mode="HTML"
    )
    context.user_data['next_state'] = GOAL_MENU # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –≤ –º–µ–Ω—é —Ü—ñ–ª–µ–π –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó
    return "WAITING_GOAL_CREATE"

# –û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ORM:
async def goal_create(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    try:
        args = update.message.text.split()
        if len(args) < 3:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: –ù–∞–∑–≤–∞ –°—É–º–∞ –ú—ñ—Å—è—Ü—ñ [–û–ø–∏—Å]",
                reply_markup=build_goals_keyboard()
            )
            return GOAL_MENU

        # –ü–∞—Ä—Å–∏–Ω–≥: –æ—Å—Ç–∞–Ω–Ω—ñ –¥–≤–∞ - —Å—É–º–∞ —Ç–∞ –º—ñ—Å—è—Ü—ñ, —Ä–µ—à—Ç–∞ - –Ω–∞–∑–≤–∞ —ñ –º–æ–∂–ª–∏–≤–∏–π –æ–ø–∏—Å
        try:
            months = int(args[-1])
            target_amount = float(args[-2])
            name_and_desc_parts = args[:-2]
            name = ' '.join(name_and_desc_parts) # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –≤—Å–µ –¥–æ —Å—É–º–∏/–º—ñ—Å—è—Ü—ñ–≤ - —Ü–µ –Ω–∞–∑–≤–∞+–æ–ø–∏—Å

            # –Ø–∫—â–æ –æ–ø–∏—Å –º–∞—î –±—É—Ç–∏ –æ–∫—Ä–µ–º–∏–º –ø–æ–ª–µ–º, —ñ –≤—ñ–Ω –æ—Å—Ç–∞–Ω–Ω—ñ–π
            # –¶–µ –¥—É–∂–µ —Å–∫–ª–∞–¥–Ω–æ –ø–∞—Ä—Å–∏—Ç–∏ –±–µ–∑ —á—ñ—Ç–∫–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∞.
            # –Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ "–ù–∞–∑–≤–∞ –°—É–º–∞ –ú—ñ—Å—è—Ü—ñ –û–ø–∏—Å", —Ç–æ –ª–æ–≥—ñ–∫–∞ –º–∞—î –±—É—Ç–∏ —Ç–∞–∫–æ—é:
            # name = ' '.join(args[0:-3])
            # target_amount = float(args[-3])
            # months = int(args[-2])
            # description = args[-1] if len(args) > 3 else None
            
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏, –∑–≥—ñ–¥–Ω–æ –∑ –≤–∞—à–∏–º –ø—Ä–∏–∫–ª–∞–¥–æ–º, "–¥–ª—è —Ä–æ–±–æ—Ç–∏" –π–¥–µ –≤ –Ω–∞–∑–≤—É.
            # –Ø–∫—â–æ "description" –º–∞—î –±—É—Ç–∏ –æ–∫—Ä–µ–º–∏–º, —Ç–æ —Ç—Ä–µ–±–∞ –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–¥–µ–ª—å —Ç–∞ –ø—ñ–¥—Ö—ñ–¥.
            # –ù–∞—Ä–∞–∑—ñ, description —É –º–æ–¥–µ–ª—ñ `Goal` —î, –∞–ª–µ –º–∏ –π–æ–≥–æ –Ω–µ –ø–∞—Ä—Å–∏–º–æ –æ–∫—Ä–µ–º–æ.
            # –©–æ–± –ø–∞—Ä—Å–∏—Ç–∏ –æ–ø–∏—Å –æ–∫—Ä–µ–º–æ, —Ç—Ä–µ–±–∞ –∑–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ–º–ø—Ç —ñ –ª–æ–≥—ñ–∫—É.
            # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "–ù–æ—É—Ç–±—É–∫ 25000 6 #–¥–ª—è_—Ä–æ–±–æ—Ç–∏" –∞–±–æ "–ù–æ—É—Ç–±—É–∫,25000,6,–¥–ª—è —Ä–æ–±–æ—Ç–∏"
            # –ê–±–æ, —è–∫—â–æ –æ–ø–∏—Å –π–¥–µ –æ—Å—Ç–∞–Ω–Ω—ñ–º —ñ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–æ–±—ñ–ª–∏:
            # name = " ".join(args[:-3]) # –Ø–∫—â–æ –æ–ø–∏—Å –∑–∞–≤–∂–¥–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π
            # target_amount = float(args[-3])
            # months = int(args[-2])
            # description = args[-1] if len(args) > 3 else None
            # –ê–±–æ, —è–∫—â–æ –æ–ø–∏—Å - —Ü–µ –≤—Å–µ, —â–æ –ø—ñ—Å–ª—è 3-–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç—É:
            # name = args[0]
            # target_amount = float(args[1])
            # months = int(args[2])
            # description = " ".join(args[3:]) if len(args) > 3 else None

            # –ó –æ–≥–ª—è–¥—É –Ω–∞ –≤–∞—à –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä–∏–∫–ª–∞–¥ "–ù–æ—É—Ç–±—É–∫ 25000 6 –¥–ª—è —Ä–æ–±–æ—Ç–∏",
            # –¥–µ "–¥–ª—è —Ä–æ–±–æ—Ç–∏" —î —á–∞—Å—Ç–∏–Ω–æ—é –Ω–∞–∑–≤–∏, –∑–∞–ª–∏—à–∞—î–º–æ —Ç–∞–∫:
            # name = ' '.join(args[:-2])
            # target_amount = float(args[-2])
            # months = int(args[-1])
            # description = None # –û–ø–∏—Å –Ω–µ –ø–∞—Ä—Å–∏—Ç—å—Å—è –æ–∫—Ä–µ–º–æ, –∞–±–æ —á–∞—Å—Ç–∏–Ω–∞ –Ω–∞–∑–≤–∏
            
            # –Ø–∫—â–æ –æ–ø–∏—Å –º–∞—î –±—É—Ç–∏ –æ–∫—Ä–µ–º–æ, —ñ –≤—ñ–Ω –º–æ–∂–µ –±—É—Ç–∏ –±–∞–≥–∞—Ç–æ—Å–ª—ñ–≤–Ω–∏–º,
            # –Ω–∞–π–∫—Ä–∞—â–µ –º–∞—Ç–∏ —á—ñ—Ç–∫–∏–π —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –∞–±–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–ª—ñ–≤.
            # –î–∞–≤–∞–π—Ç–µ –∑—Ä–æ–±–∏–º–æ –æ–ø–∏—Å –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–º —ñ –æ—Å—Ç–∞–Ω–Ω—ñ–º:
            if len(args) >= 4: # –Ø–∫—â–æ —î –æ–ø–∏—Å
                name = ' '.join(args[:-3])
                target_amount = float(args[-3])
                months = int(args[-2])
                description = args[-1]
            else: # –ë–µ–∑ –æ–ø–∏—Å—É
                name = ' '.join(args[:-2])
                target_amount = float(args[-2])
                months = int(args[-1])
                description = None

        except (ValueError, IndexError):
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–∞–Ω–∏—Ö. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ —Å—É–º–∞ —Ç–∞ –º—ñ—Å—è—Ü—ñ - —á–∏—Å–ª–∞.\n"
                "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: <code>–ù–∞–∑–≤–∞ –°—É–º–∞ –ú—ñ—Å—è—Ü—ñ [–û–ø–∏—Å]</code>",
                parse_mode="HTML",
                reply_markup=build_goals_keyboard()
            )
            return GOAL_MENU
            
        session = DBSession()
        goal = Goal(
            user_id=user_id,
            name=name,
            target_amount=target_amount,
            months=months,
            created_at=datetime.now().date(), # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ .date() –¥–ª—è –ø–æ–ª—è Date
            description=description
        )
        session.add(goal)
        session.commit()
        session.close()

        reply_text = (
            f"‚úÖ –¶—ñ–ª—å <b>'{name}'</b> —Å—Ç–≤–æ—Ä–µ–Ω–∞!\n"
            f"üíµ –°—É–º–∞: <b>{target_amount}</b> –≥—Ä–Ω\n"
            f"üìÖ –¢–µ—Ä–º—ñ–Ω: <b>{months}</b> –º—ñ—Å—è—Ü—ñ–≤"
        )
        if description:
            reply_text += f"\nüìù –û–ø–∏—Å: {description}"
            
        await update.message.reply_text(
            reply_text,
            parse_mode="HTML",
            reply_markup=build_goals_keyboard()
        )
        return GOAL_MENU

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ü—ñ–ª—ñ: {e}")
        await update.message.reply_text(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ü—ñ–ª—ñ",
            reply_markup=build_goals_keyboard()
        )
        return GOAL_MENU

# –û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ORM:
async def goal_add_prompt(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üí∞ –í–≤–µ–¥—ñ—Ç—å ID —Ü—ñ–ª—ñ —Ç–∞ —Å—É–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "<code>ID –°—É–º–∞</code>\n\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>3 1500</code>",
        parse_mode="HTML"
    )
    return "WAITING_GOAL_ADD"

# –û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ORM:
async def goal_add(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    session = DBSession()
    try:
        args = update.message.text.split()
        if len(args) < 2:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: ID –°—É–º–∞",
                reply_markup=build_goals_keyboard()
            )
            return GOAL_MENU

        goal_id = int(args[0])
        amount = float(args[1])
        if amount <= 0:
            await update.message.reply_text("–°—É–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ—é.", reply_markup=build_goals_keyboard())
            return GOAL_MENU

        goal = session.query(Goal).filter_by(id=goal_id, user_id=user_id).first()

        if not goal:
            await update.message.reply_text(
                "‚ùå –¶—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=build_goals_keyboard()
            )
            return GOAL_MENU

        new_amount = goal.current_amount + amount
        
        # –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —Ç–∏–ø—É "income" (–∞–±–æ —ñ–Ω—à–∏–π, —è–∫–∏–π –≤–∏ –≤–∏—Ä—ñ—à–∏—Ç–µ –¥–ª—è –≤–Ω–µ—Å–∫—ñ–≤ —É —Ü—ñ–ª—ñ)
        await db_transactions.add_transaction(
            user_id=user_id,
            amount=amount,
            transaction_type='goal_deposit', # –ê–±–æ 'income'
            category=f"–¶—ñ–ª—å: {goal.name}", # –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –¥–ª—è —Ü—ñ–ª—ñ
            description=f"–í–Ω–µ—Å–æ–∫ —É —Ü—ñ–ª—å '{goal.name}'"
        )

        if new_amount > goal.target_amount:
            # –Ø–∫—â–æ –¥–æ–¥–∞–Ω–∞ —Å—É–º–∞ –ø–µ—Ä–µ–≤–∏—â—É—î —Ü—ñ–ª—å, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —ó—ó –Ω–∞ —Ü—ñ–ª—å–æ–≤—É
            overflow_amount = new_amount - goal.target_amount
            goal.current_amount = goal.target_amount
            session.add(goal)
            session.commit()
            await update.message.reply_text(
                f"‚úÖ –î–æ–¥–∞–Ω–æ <b>{amount - overflow_amount:.2f}</b> –≥—Ä–Ω –¥–æ —Ü—ñ–ª—ñ <b>'{goal.name}'</b>! –¶—ñ–ª—å –¥–æ—Å—è–≥–Ω—É—Ç–∞!\n"
                f"üéâ –í–∏ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–∫–æ–ø–∏—á–∏–ª–∏ {goal.target_amount} –≥—Ä–Ω. –ó–∞–ª–∏—à–æ–∫ {overflow_amount:.2f} –≥—Ä–Ω –Ω–µ –±—É–ª–æ –¥–æ–¥–∞–Ω–æ.",
                parse_mode="HTML",
                reply_markup=build_goals_keyboard()
            )
            return GOAL_MENU
            
        goal.current_amount = new_amount
        session.add(goal)
        session.commit()

        remaining = goal.target_amount - new_amount
        await update.message.reply_text(
            f"‚úÖ –î–æ–¥–∞–Ω–æ <b>{amount}</b> –≥—Ä–Ω –¥–æ —Ü—ñ–ª—ñ <b>'{goal.name}'</b>!\n"
            f"üí∞ –ó–∞–ª–∏—à–∏–ª–æ—Å—å –∑—ñ–±—Ä–∞—Ç–∏: <b>{remaining:.2f}</b> –≥—Ä–Ω",
            parse_mode="HTML",
            reply_markup=build_goals_keyboard()
        )
        return GOAL_MENU

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–∞–Ω–∏—Ö. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ ID —Ç–∞ —Å—É–º–∞ - —á–∏—Å–ª–∞",
            reply_markup=build_goals_keyboard()
        )
        return GOAL_MENU
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ —Ü—ñ–ª—ñ: {e}")
        await update.message.reply_text(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ—à—Ç—ñ–≤",
            reply_markup=build_goals_keyboard()
        )
        return GOAL_MENU
    finally:
        session.close()

# –û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ORM:
async def goal_delete_prompt(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "‚ùå –í–≤–µ–¥—ñ—Ç—å ID —Ü—ñ–ª—ñ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:\n"
        "<code>ID</code>\n\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>2</code>",
        parse_mode="HTML"
    )
    return "WAITING_GOAL_DELETE"

# –û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ORM:
async def goal_delete(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    session = DBSession()
    try:
        goal_id = int(update.message.text)

        goal = session.query(Goal).filter_by(id=goal_id, user_id=user_id).first()

        if not goal:
            await update.message.reply_text(
                "‚ùå –¶—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=build_goals_keyboard()
            )
            return GOAL_MENU

        session.delete(goal)
        session.commit()

        await update.message.reply_text(
            f"‚úÖ –¶—ñ–ª—å <b>'{goal.name}'</b> –≤–∏–¥–∞–ª–µ–Ω–∞!",
            parse_mode="HTML",
            reply_markup=build_goals_keyboard()
        )
        return GOAL_MENU

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–∞–Ω–∏—Ö. ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º",
            reply_markup=build_goals_keyboard()
        )
        return GOAL_MENU
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ü—ñ–ª—ñ: {e}")
        await update.message.reply_text(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ü—ñ–ª—ñ",
            reply_markup=build_goals_keyboard()
        )
        return GOAL_MENU
    finally:
        session.close()

# –û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ORM:
async def handle_analytics(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
        all_transactions = await db_transactions.get_transactions(user_id, limit=99999) # –í–µ–ª–∏–∫–∏–π –ª—ñ–º—ñ—Ç –¥–ª—è –≤—Å—ñ—Ö

        if not all_transactions:
            await update.message.reply_text(
                "üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏.",
                reply_markup=build_main_keyboard()
            )
            return ConversationHandler.END

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ñ—É–Ω–∫—Ü—ñ—ó
        current_balance = await db_transactions.get_balance(user_id)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ (–∑–∞ –≤–µ—Å—å –ø–µ—Ä—ñ–æ–¥ –∞–±–æ –∑–∞ –æ–±—Ä–∞–Ω–∏–π)
        spending_by_category = {}
        for t in all_transactions:
            if t.type == 'expense': # –¢—ñ–ª—å–∫–∏ –≤–∏—Ç—Ä–∞—Ç–∏ –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –≤–∏—Ç—Ä–∞—Ç
                spending_by_category[t.category] = spending_by_category.get(t.category, 0.0) + t.amount

        sorted_categories = sorted(spending_by_category.items(), key=lambda item: item[1], reverse=True)
        total_overall_expense = sum(spending_by_category.values())

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–µ—Ä–µ–¥–Ω—å–æ–º—ñ—Å—è—á–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç
        months_data = {} # { "YYYY-MM": total_expense_for_month }
        for t in all_transactions:
            if t.type == 'expense' and t.date: # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ t.date –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å, —è–∫—â–æ —Ü–µ –æ–±'—î–∫—Ç datetime
                month_key = t.date.strftime('%Y-%m')
                months_data[month_key] = months_data.get(month_key, 0.0) + t.amount
        
        avg_monthly_expense = sum(months_data.values()) / len(months_data) if months_data else 0

        response = "üìä <b>–§—ñ–Ω–∞–Ω—Å–æ–≤–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞</b>\n\n"
        response += f"üí∞ <b>–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:</b> {current_balance:.2f} –≥—Ä–Ω\n"
        response += f"‚¨áÔ∏è <b>–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ (–∑–∞ –≤–µ—Å—å —á–∞—Å):</b> {total_overall_expense:.2f} –≥—Ä–Ω\n"
        response += f"üìÜ <b>–°–µ—Ä–µ–¥–Ω—å–æ–º—ñ—Å—è—á–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏:</b> {avg_monthly_expense:.2f} –≥—Ä–Ω\n\n"
        
        if sorted_categories:
            response += "<b>–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –≤–∏—Ç—Ä–∞—Ç (–∑–∞ –≤–µ—Å—å —á–∞—Å):</b>\n"
            for i, (category, amount) in enumerate(sorted_categories, 1):
                response += f"{i}. {category.capitalize()}: {amount:.2f} –≥—Ä–Ω\n"
        else:
            response += "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏.\n"
        
        await update.message.reply_text(
            response,
            parse_mode="HTML",
            reply_markup=build_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in analytics handler: {e}")
        await update.message.reply_text(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏",
            reply_markup=build_main_keyboard()
        )


def setup_handlers(application: Application):
    # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler("help", cmd_help))
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    application.add_handler(MessageHandler(filters.Text(["üìä –ê–Ω–∞–ª—ñ–∑"]), handle_analytics))
    
    settings_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Text(["‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"]), settings.handle_settings)],
        states={
            settings.SETTINGS_MENU: [
                MessageHandler(filters.Text(["üí± –ó–º—ñ–Ω–∏—Ç–∏ –≤–∞–ª—é—Ç—É"]), settings.change_currency_start),
                MessageHandler(filters.Text(["üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è"]), settings.notification_settings),
                MessageHandler(filters.Text(["üì§ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö"]), settings.data_export),
                MessageHandler(filters.Text(["üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É"]), settings.cancel_settings)
            ],
            settings.CHANGE_CURRENCY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, settings.change_currency)
            ],
            settings.NOTIFICATION_SETTINGS: [
                MessageHandler(filters.Text(["üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É"]), settings.cancel_settings)
            ],
            settings.DATA_EXPORT: [
                MessageHandler(filters.Text(["üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É"]), settings.cancel_settings)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", settings.cancel_settings),
            MessageHandler(filters.Text(["üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É"]), settings.cancel_settings)
        ]
    )
    application.add_handler(settings_handler)
    
    
    # –î–æ–¥–∞–Ω–æ ConversationHandler –¥–ª—è "‚ûï –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è"
    transaction_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Text(["‚ûï –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è"]), handle_transaction_start)],
        states={
            ADD_TRANSACTION_TYPE: [
                MessageHandler(filters.Text(["–î–æ—Ö—ñ–¥", "–í–∏—Ç—Ä–∞—Ç–∞"]) & ~filters.COMMAND, get_transaction_type)
            ],
            ADD_TRANSACTION_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_transaction_amount)
            ],
            ADD_TRANSACTION_CATEGORY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_transaction_category)
            ],
            ADD_TRANSACTION_DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_transaction_description)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_conversation),
            MessageHandler(filters.Text(["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", "üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É"]), cancel_conversation)
        ]
    )
    application.add_handler(transaction_handler)

    # –û–±—Ä–æ–±–Ω–∏–∫ —Ü—ñ–ª–µ–π
    goals_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Text(["üéØ –¶—ñ–ª—ñ"]), handle_goals)],
        states={
            GOAL_MENU: [
                MessageHandler(filters.Text(["üìã –°–ø–∏—Å–æ–∫ —Ü—ñ–ª–µ–π"]), goal_list),
                MessageHandler(filters.Text(["‚ûï –ù–æ–≤–∞ —Ü—ñ–ª—å"]), goal_create_prompt),
                MessageHandler(filters.Text(["üí∞ –î–æ–¥–∞—Ç–∏ –∫–æ—à—Ç–∏"]), goal_add_prompt),
                MessageHandler(filters.Text(["‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ü—ñ–ª—å"]), goal_delete_prompt),
                MessageHandler(filters.Text(["üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É"]), cancel_conversation)
            ],
            "WAITING_GOAL_CREATE": [
                MessageHandler(filters.TEXT & ~filters.COMMAND, goal_create)
            ],
            "WAITING_GOAL_ADD": [
                MessageHandler(filters.TEXT & ~filters.COMMAND, goal_add)
            ],
            "WAITING_GOAL_DELETE": [
                MessageHandler(filters.TEXT & ~filters.COMMAND, goal_delete)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_conversation),
            MessageHandler(filters.Text(["üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É"]), cancel_conversation)
        ]
    )
    application.add_handler(goals_handler)
    
    # –û–±—Ä–æ–±–Ω–∏–∫ –±—é–¥–∂–µ—Ç—É
    budget_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Text(["üí∞ –ë—é–¥–∂–µ—Ç"]), budget_start),
            CommandHandler("budget", budget_start)
        ],
        states={
            BUDGET_MENU: [
                MessageHandler(filters.Text(["‚ûï –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É"]), add_expense_start),
                MessageHandler(filters.Text(["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]), show_statistics),
                MessageHandler(filters.Text(["‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É"]), budget_settings_start),
                MessageHandler(filters.Text(["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]), cancel_conversation)
            ],
            ADDING_EXPENSE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_expense)
            ],
            SETTING_BUDGET: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_budget_settings),
                CommandHandler("list", handle_budget_settings)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_conversation),
            MessageHandler(filters.Text(["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]), cancel_conversation)
        ]
    )
    application.add_handler(budget_handler)
    
    # –û–±—Ä–æ–±–Ω–∏–∫ AI
    ai_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Text(["ü§ñ AI –ü–æ—Ä–∞–¥–∏"]), handle_ai_advice),
            CommandHandler("advice", handle_ai_advice)
        ],
        states={
            AI_SESSION: [
                # Use a lambda to pass the required arguments to ai.handle_ai_question
                MessageHandler(
                    filters.TEXT & ~filters.Text(["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]),
                    lambda update, context: ai.handle_ai_question(
                        update, context, build_main_keyboard, build_ai_keyboard, AI_SESSION
                    )
                ),
                MessageHandler(filters.Text(["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]), cancel_conversation)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_conversation),
            MessageHandler(filters.Text(["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]), cancel_conversation)
        ]
    )
    application.add_handler(ai_handler)

def main():
    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        raise ValueError("–ù–µ –≤–∫–∞–∑–∞–Ω–æ TELEGRAM_TOKEN")
    
    application = Application.builder().token(token).build()
    setup_handlers(application)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    application.run_polling()

if __name__ == "__main__":
    main()