import logging
import httpx
import asyncio
from telegram import Update
from telegram.ext import CallbackContext
from main import build_main_keyboard, build_ai_keyboard, ConversationHandler, AI_SESSION

logger = logging.getLogger(__name__)

OLLAMA_HOST = "http://localhost:9117"
TIMEOUT = 30.0

async def check_ollama_available():
    try:
        async with httpx.AsyncClient(timeout=TIMEOUT) as client:
            response = await client.get(f"{OLLAMA_HOST}/api/tags")
            if response.status_code == 200:
                return True
            logger.error(f"Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ö–æ–¥ —Å—Ç–∞—Ç—É—Å—É: {response.status_code}")
            return False
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Ollama: {str(e)}")
        return False

async def ask_ollama(question: str) -> str:
    try:
        ollama_payload = {
            "model": "llama3:8b",
            "messages": [
                {
                    "role": "system",
                    "content": (
                        "–¢–∏ ‚Äî —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç FinWise Owl. "
                        "–ù–∞–¥–∞–≤–∞–π —á—ñ—Ç–∫—ñ, –ª–∞–∫–æ–Ω—ñ—á–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. "
                        "–§–æ–∫—É—Å—É–π—Å—è –Ω–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –ø–æ—Ä–∞–¥–∞—Ö —Ç–∞ –∞–Ω–∞–ª—ñ–∑—ñ."
                    )
                },
                {"role": "user", "content": question}
            ],
            "stream": False,
            "options": {"temperature": 0.7}
        }

        async with httpx.AsyncClient(timeout=60.0) as client:
            response = await client.post(
                f"{OLLAMA_HOST}/api/chat",
                json=ollama_payload
            )
            
            if response.status_code != 200:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ Ollama: {response.status_code} - {response.text}")
                return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            
            data = response.json()
            if not data.get("message") or not data["message"].get("content"):
                logger.error("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Ollama")
                return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å AI."
            
            return data["message"]["content"]

    except httpx.ReadTimeout:
        logger.error("–¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É –¥–æ Ollama")
        return "–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –º–∏–Ω—É–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å—Ñ–æ—Ä–º—É–ª—é–π—Ç–µ –∫–æ—Ä–æ—Ç—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è."
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Ollama: {str(e)}")
        return "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É."

async def handle_ai_question(update: Update, context: CallbackContext):
    try:
        if not await check_ollama_available():
            await update.message.reply_text(
                "üî¥ –ù–∞ –∂–∞–ª—å, AI-—Å–µ—Ä–≤—ñ—Å —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                reply_markup=build_main_keyboard()
            )
            return ConversationHandler.END

        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action="typing"
        )

        user_question = update.message.text
        if not user_question or len(user_question.strip()) < 3:
            await update.message.reply_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è (–Ω–µ –º–µ–Ω—à–µ 3 —Å–∏–º–≤–æ–ª—ñ–≤).",
                reply_markup=build_ai_keyboard()
            )
            return AI_SESSION

        answer = await ask_ollama(user_question)
        
        # –û–±—Ä—ñ–∑–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, —è–∫—â–æ –≤–æ–Ω–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞ –¥–ª—è Telegram
        if len(answer) > 4000:
            answer = answer[:4000] + "\n\n[...]"
        
        await update.message.reply_text(
            f"ü§ñ FinWise Owl AI:\n\n{answer}",
            reply_markup=build_ai_keyboard()
        )
        return AI_SESSION

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±–Ω–∏–∫—É AI: {str(e)}")
        await update.message.reply_text(
            "üî¥ –°—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=build_main_keyboard()
        )
        return ConversationHandler.END