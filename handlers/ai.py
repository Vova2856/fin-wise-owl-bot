import logging
import httpx
import asyncio
import os
from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler

logger = logging.getLogger(__name__)

# –û—Ç—Ä–∏–º—É—î–º–æ OLLAMA_HOST –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
OLLAMA_HOST = os.getenv("OLLAMA_HOST", "http://localhost:9117").strip()

# –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ç–∞ –ø—Ä–µ—Ñ—ñ–∫—Å –ø—Ä–æ—Ç–æ–∫–æ–ª—É, —è–∫—â–æ –≤—ñ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
if not OLLAMA_HOST.startswith(("http://", "https://")):
    OLLAMA_HOST = f"http://localhost:9117"

# –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ —Å–ª–µ—à—ñ –≤ –∫—ñ–Ω—Ü—ñ URL, —è–∫—â–æ –≤–æ–Ω–∏ —î
OLLAMA_HOST = OLLAMA_HOST.rstrip('/')

# –ó–±—ñ–ª—å—à–µ–Ω–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ (6 —Ö–≤–∏–ª–∏–Ω)
TIMEOUT = 360.0

logger.info(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è OLLAMA_HOST: {OLLAMA_HOST}")

async def check_ollama_available():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤—ñ—Å—É Ollama –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º."""
    try:
        # –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –ø—É—Å—Ç–∏–π URL
        if not OLLAMA_HOST:
            logger.error("OLLAMA_HOST –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            return False

        async with httpx.AsyncClient(timeout=TIMEOUT) as client:
            # –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º
            logger.info(f"–°–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Ollama –∑–∞ URL: http://localhost:9117/api/tags")
            
            try:
                response = await client.get(f"http://localhost:9117/api/tags")
                
                # –î–æ–¥–∞—Ç–∫–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                logger.info(f"Ollama response status: {response.status_code}")
                
                if response.status_code == 200:
                    logger.info("Ollama –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î")
                    return True
                
                logger.error(f"Ollama –≤—ñ–¥–ø–æ–≤—ñ–≤ –∑ –∫–æ–¥–æ–º {response.status_code}")
                return False
                
            except httpx.ConnectError as ce:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Ollama: {str(ce)}")
                return False
            except httpx.TimeoutException:
                logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ Ollama")
                return False
                
    except Exception as e:
        logger.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ Ollama: {str(e)}", exc_info=True)
        return False

async def ask_ollama(question: str) -> str:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∑–∞–ø–∏—Ç –¥–æ Ollama AI —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –æ–±—Ä–æ–±–ª–µ–Ω–Ω—è–º –ø–æ–º–∏–ª–æ–∫."""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
        if not question or not question.strip():
            logger.error("–û—Ç—Ä–∏–º–∞–Ω–æ –ø—É—Å—Ç–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è")
            return "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è."

        ollama_payload = {
            "model": "llama3:8b",
            "messages": [
                {
                    "role": "system",
                    "content": (
                        "–¢–∏ ‚Äî —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç FinWise Owl. "
                        "–ù–∞–¥–∞–≤–∞–π —á—ñ—Ç–∫—ñ, –ª–∞–∫–æ–Ω—ñ—á–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. "
                        "–§–æ–∫—É—Å—É–π—Å—è –Ω–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –ø–æ—Ä–∞–¥–∞—Ö —Ç–∞ –∞–Ω–∞–ª—ñ–∑—ñ."
                    )
                },
                {"role": "user", "content": question}
            ],
            "stream": False,
            "options": {"temperature": 0.7}
        }

        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –¥–æ Ollama: {question[:50]}...")  # –õ–æ–≥—É—î–º–æ –ø–æ—á–∞—Ç–æ–∫ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è

        async with httpx.AsyncClient(timeout=TIMEOUT) as client:
            try:
                response = await client.post(
                    f"{OLLAMA_HOST}/api/chat",
                    json=ollama_payload
                )
                
                if response.status_code != 200:
                    logger.error(f"Ollama –ø–æ–≤–µ—Ä–Ω—É–≤ –∫–æ–¥ {response.status_code}. –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text}")
                    return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
                
                data = response.json()
                
                if not data.get("message") or not data["message"].get("content"):
                    logger.error(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Ollama: {data}")
                    return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å AI."
                
                answer = data["message"]["content"]
                logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ–≤–∂–∏–Ω–æ—é {len(answer)} —Å–∏–º–≤–æ–ª—ñ–≤")
                return answer
                
            except httpx.RequestError as re:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Ollama: {str(re)}")
                return "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ AI —Å–µ—Ä–≤—ñ—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            except ValueError as ve:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: {str(ve)}")
                return "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ AI."

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ ask_ollama: {str(e)}", exc_info=True)
        return "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É."

async def handle_ai_question(update: Update, context: CallbackContext, build_main_keyboard_func, build_ai_keyboard_func, ai_session_state):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ AI –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –æ–±—Ä–æ–±–ª–µ–Ω–Ω—è–º –ø–æ–º–∏–ª–æ–∫."""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ —Ç–µ–∫—Å—Ç
        if not update.message or not update.message.text:
            logger.error("–û—Ç—Ä–∏–º–∞–Ω–æ –ø—É—Å—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
            await update.message.reply_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.",
                reply_markup=build_ai_keyboard_func()
            )
            return ai_session_state

        user_question = update.message.text.strip()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
        if len(user_question) < 3:
            await update.message.reply_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–æ–≤—à–µ (–º—ñ–Ω—ñ–º—É–º 3 —Å–∏–º–≤–æ–ª–∏).",
                reply_markup=build_ai_keyboard_func()
            )
            return ai_session_state

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç—É—Å "–¥—Ä—É–∫—É—î"
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action="typing"
        )

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Ollama
        answer = await ask_ollama(user_question)
        
        # –û–±—Ä—ñ–∑–∞—î–º–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        if len(answer) > 4000:
            answer = answer[:4000] + "\n\n[...]"
            logger.warning("–í—ñ–¥–ø–æ–≤—ñ–¥—å –±—É–ª–æ –æ–±—Ä—ñ–∑–∞–Ω–æ —á–µ—Ä–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è Telegram")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        await update.message.reply_text(
            f"ü§ñ FinWise Owl AI:\n\n{answer}",
            reply_markup=build_ai_keyboard_func()
        )
        
        return ai_session_state

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ handle_ai_question: {str(e)}", exc_info=True)
        await update.message.reply_text(
            "üî¥ –°—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=build_main_keyboard_func()
        )
        return ConversationHandler.END