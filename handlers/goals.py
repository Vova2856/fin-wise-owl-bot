from aiogram import Router, types
from aiogram.filters import Command
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.sql import text as sql_text
from datetime import datetime
import os

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DB_URL = os.getenv("DB_URL", "sqlite:///finance_bot.db")
engine = create_engine(DB_URL)
Session = sessionmaker(bind=engine)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ —Ü—ñ–ª–µ–π (—è–∫—â–æ —â–µ –Ω–µ —ñ—Å–Ω—É—î)
with engine.connect() as conn:
    conn.execute(sql_text("""
    CREATE TABLE IF NOT EXISTS goals (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        name TEXT NOT NULL,
        target_amount REAL NOT NULL,
        current_amount REAL DEFAULT 0,
        months INTEGER NOT NULL,
        created_at TEXT NOT NULL
    )
    """))
    conn.commit()

goals_router = Router()

@goals_router.message(Command("goal"))
async def goal_menu(message: types.Message):
    await message.answer(
        "üéØ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ü—ñ–ª—è–º–∏:\n"
        "/goal_create [–Ω–∞–∑–≤–∞] [—Å—É–º–∞] [–º—ñ—Å—è—Ü—ñ] - –Ω–æ–≤–∞ —Ü—ñ–ª—å\n"
        "/goal_list - –º–æ—ó —Ü—ñ–ª—ñ\n"
        "/goal_add [id] [—Å—É–º–∞] - –¥–æ–¥–∞—Ç–∏ –∫–æ—à—Ç–∏ –¥–æ —Ü—ñ–ª—ñ\n"
        "/goal_delete [id] - –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—ñ–ª—å"
    )

@goals_router.message(Command("goal_create"))
async def goal_create(message: types.Message):
    try:
        args = message.text.split()[1:]
        if len(args) < 3:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /goal_create [–Ω–∞–∑–≤–∞] [—Å—É–º–∞] [–º—ñ—Å—è—Ü—ñ]")
            return

        name = ' '.join(args[:-2])
        target_amount = float(args[-2])
        months = int(args[-1])

        session = Session()
        session.execute(
            sql_text("""
                INSERT INTO goals (user_id, name, target_amount, months, created_at)
                VALUES (:user_id, :name, :target_amount, :months, :created_at)
            """),
            {
                "user_id": message.from_user.id,
                "name": name,
                "target_amount": target_amount,
                "months": months,
                "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
        )
        session.commit()

        await message.answer(f"‚úÖ –¶—ñ–ª—å '{name}' —Å—Ç–≤–æ—Ä–µ–Ω–∞!\n"
                           f"üíµ –°—É–º–∞: {target_amount} –≥—Ä–Ω\n"
                           f"üìÖ –¢–µ—Ä–º—ñ–Ω: {months} –º—ñ—Å—è—Ü—ñ–≤")

    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–∞–Ω–∏—Ö. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ —Å—É–º–∞ —Ç–∞ –º—ñ—Å—è—Ü—ñ - —á–∏—Å–ª–∞")
    except Exception as e:
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ü—ñ–ª—ñ")
        print(f"Error creating goal: {e}")

@goals_router.message(Command("goal_list"))
async def goal_list(message: types.Message):
    try:
        session = Session()
        goals = session.execute(
            sql_text("SELECT id, name, target_amount, current_amount, months FROM goals WHERE user_id = :user_id"),
            {"user_id": message.from_user.id}
        ).fetchall()

        if not goals:
            await message.answer("üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Ü—ñ–ª–µ–π")
            return

        response = "üéØ –í–∞—à—ñ —Ü—ñ–ª—ñ:\n\n"
        for goal in goals:
            progress = (goal.current_amount / goal.target_amount) * 100
            monthly = (goal.target_amount - goal.current_amount) / goal.months
            response += (
                f"üÜî ID: {goal.id}\n"
                f"üìå –ù–∞–∑–≤–∞: {goal.name}\n"
                f"üíµ –¶—ñ–ª—å: {goal.target_amount} –≥—Ä–Ω\n"
                f"üí∞ –ù–∞–∫–æ–ø–∏—á–µ–Ω–æ: {goal.current_amount} –≥—Ä–Ω ({progress:.1f}%)\n"
                f"üìÖ –ú—ñ—Å—è—á–Ω–∞ —Å—É–º–∞: ~{monthly:.2f} –≥—Ä–Ω\n"
                f"------------------------\n"
            )

        await message.answer(response)

    except Exception as e:
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É —Ü—ñ–ª–µ–π")
        print(f"Error listing goals: {e}")

@goals_router.message(Command("goal_add"))
async def goal_add(message: types.Message):
    try:
        args = message.text.split()[1:]
        if len(args) < 2:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /goal_add [id] [—Å—É–º–∞]")
            return

        goal_id = int(args[0])
        amount = float(args[1])

        session = Session()
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ü—ñ–ª—å
        goal = session.execute(
            sql_text("SELECT id, target_amount, current_amount FROM goals WHERE id = :id AND user_id = :user_id"),
            {"id": goal_id, "user_id": message.from_user.id}
        ).fetchone()

        if not goal:
            await message.answer("‚ùå –¶—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
            return

        new_amount = goal.current_amount + amount
        if new_amount > goal.target_amount:
            await message.answer(f"‚ö†Ô∏è –°—É–º–∞ –ø–µ—Ä–µ–≤–∏—â—É—î —Ü—ñ–ª—å–æ–≤—É! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ {goal.target_amount - goal.current_amount} –≥—Ä–Ω")
            return

        session.execute(
            sql_text("UPDATE goals SET current_amount = :amount WHERE id = :id"),
            {"amount": new_amount, "id": goal_id}
        )
        session.commit()

        remaining = goal.target_amount - new_amount
        await message.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ {amount} –≥—Ä–Ω –¥–æ —Ü—ñ–ª—ñ!\n"
                           f"üí∞ –ó–∞–ª–∏—à–∏–ª–æ—Å—å –∑—ñ–±—Ä–∞—Ç–∏: {remaining:.2f} –≥—Ä–Ω")

    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–∞–Ω–∏—Ö. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ ID —Ç–∞ —Å—É–º–∞ - —á–∏—Å–ª–∞")
    except Exception as e:
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ—à—Ç—ñ–≤")
        print(f"Error adding to goal: {e}")

@goals_router.message(Command("goal_delete"))
async def goal_delete(message: types.Message):
    try:
        args = message.text.split()[1:]
        if not args:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /goal_delete [id]")
            return

        goal_id = int(args[0])

        session = Session()
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ü—ñ–ª—å
        goal = session.execute(
            sql_text("SELECT name FROM goals WHERE id = :id AND user_id = :user_id"),
            {"id": goal_id, "user_id": message.from_user.id}
        ).fetchone()

        if not goal:
            await message.answer("‚ùå –¶—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
            return

        session.execute(
            sql_text("DELETE FROM goals WHERE id = :id"),
            {"id": goal_id}
        )
        session.commit()

        await message.answer(f"‚úÖ –¶—ñ–ª—å '{goal.name}' –≤–∏–¥–∞–ª–µ–Ω–∞!")

    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–∞–Ω–∏—Ö. ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
    except Exception as e:
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ü—ñ–ª—ñ")
        print(f"Error deleting goal: {e}")