from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import CallbackContext, ConversationHandler
from database import Session as DBSession, User
import logging

logger = logging.getLogger(__name__)

SETTINGS_MENU, CHANGE_CURRENCY, NOTIFICATION_SETTINGS, DATA_EXPORT = range(4)

def build_settings_keyboard():
    keyboard = [
        ["üí± –ó–º—ñ–Ω–∏—Ç–∏ –≤–∞–ª—é—Ç—É", "üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è"],
        ["üì§ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö", "üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def handle_settings(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "‚öô <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=build_settings_keyboard(),
        parse_mode="HTML"
    )
    return SETTINGS_MENU

async def change_currency_start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üí± <b>–ó–º—ñ–Ω–∏—Ç–∏ –≤–∞–ª—é—Ç—É</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –≤–∞–ª—é—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, USD, EUR, UAH):\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ñ –≤–∞–ª—é—Ç–∏:\n"
        "üá∫üá¶ UAH - –ì—Ä–∏–≤–Ω—è\n"
        "üá∫üá∏ USD - –î–æ–ª–∞—Ä –°–®–ê\n"
        "üá™üá∫ EUR - –Ñ–≤—Ä–æ\n"
        "üá¨üáß GBP - –§—É–Ω—Ç —Å—Ç–µ—Ä–ª—ñ–Ω–≥—ñ–≤",
        parse_mode="HTML"
    )
    return CHANGE_CURRENCY

async def change_currency(update: Update, context: CallbackContext):
    currency = update.message.text.upper().strip()
    valid_currencies = ["UAH", "USD", "EUR", "GBP"]
    
    if currency not in valid_currencies:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –≤–∞–ª—é—Ç–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –æ–¥–∏–Ω –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–¥—ñ–≤: UAH, USD, EUR, GBP"
        )
        return CHANGE_CURRENCY
    
    user_id = update.effective_user.id
    session = DBSession()
    try:
        user = session.query(User).filter_by(id=user_id).first()
        if user:
            user.currency = currency
            session.commit()
            await update.message.reply_text(
                f"‚úÖ –í–∞–ª—é—Ç–∞ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞ {currency}",
                reply_markup=build_settings_keyboard()
            )
        else:
            await update.message.reply_text(
                "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=build_settings_keyboard()
            )
        return SETTINGS_MENU
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –≤–∞–ª—é—Ç–∏: {e}")
        await update.message.reply_text(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –≤–∞–ª—é—Ç–∏",
            reply_markup=build_settings_keyboard()
        )
        return SETTINGS_MENU
    finally:
        session.close()

async def notification_settings(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üîî <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Å–ø–æ–≤—ñ—â–µ–Ω—å:\n"
        "üïò –©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç\n"
        "üí∏ –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –ø–µ—Ä–µ–≤–∏—Ç—Ä–∞—Ç–∏\n"
        "üèÅ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ü—ñ–ª–µ–π",
        parse_mode="HTML",
        reply_markup=build_settings_keyboard()
    )
    return NOTIFICATION_SETTINGS

async def data_export(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üì§ <b>–ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –µ–∫—Å–ø–æ—Ä—Ç—É:\n"
        "üìù CSV\n"
        "üìä Excel\n"
        "üìÑ PDF",
        parse_mode="HTML",
        reply_markup=build_settings_keyboard()
    )
    return DATA_EXPORT

async def cancel_settings(update: Update, context: CallbackContext):
    from main import build_main_keyboard
    await update.message.reply_text(
        "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
        reply_markup=build_main_keyboard()
    )
    return ConversationHandler.END