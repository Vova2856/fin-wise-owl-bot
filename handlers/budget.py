from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    ConversationHandler
)
from datetime import datetime
import logging
from database import Session, Transaction, Budget  # –ü—Ä–∏–ø—É—Å–∫–∞—é—á–∏, —â–æ —É –≤–∞—Å —î —Ç–∞–∫—ñ –º–æ–¥–µ–ª—ñ

logger = logging.getLogger(__name__)

# –°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
BUDGET_MENU, ADDING_EXPENSE, SETTING_BUDGET, VIEWING_STATS = range(4)

def build_budget_keyboard():
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –±—é–¥–∂–µ—Ç—É"""
    keyboard = [
        ["‚ûï –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
        ["‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É", "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def budget_start(update: Update, context: CallbackContext) -> int:
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏ –∑ –±—é–¥–∂–µ—Ç–æ–º"""
    await update.message.reply_text(
        "üí∞ <b>–†–æ–∑–¥—ñ–ª –±—é–¥–∂–µ—Ç—É</b>\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=build_budget_keyboard(),
        parse_mode="HTML"
    )
    return BUDGET_MENU

async def add_expense_start(update: Update, context: CallbackContext) -> int:
    """–ü–æ—á–∞—Ç–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏"""
    await update.message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å –≤–∏—Ç—Ä–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "<code>100 —ó–∂–∞</code> –∞–±–æ <code>200 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç</code>\n"
        "–ê–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '—Å–∫–∞—Å—É–≤–∞—Ç–∏' –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è",
        parse_mode="HTML"
    )
    return ADDING_EXPENSE

async def add_expense(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–æ–±–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏"""
    try:
        text = update.message.text
        if text.lower() == '—Å–∫–∞—Å—É–≤–∞—Ç–∏':
            await update.message.reply_text(
                "–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
                reply_markup=build_budget_keyboard()
            )
            return BUDGET_MENU

        amount, *category_parts = text.split()
        amount = float(amount)
        category = ' '.join(category_parts).lower()

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        session = Session()
        transaction = Transaction(
            user_id=update.effective_user.id,
            amount=amount,
            category=category,
            date=datetime.now()
        )
        session.add(transaction)
        session.commit()
        
        await update.message.reply_text(
            f"‚úÖ –í–∏—Ç—Ä–∞—Ç—É {amount} –≥—Ä–Ω –Ω–∞ '{category}' –¥–æ–¥–∞–Ω–æ!",
            reply_markup=build_budget_keyboard()
        )
        return BUDGET_MENU

    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <code>100 —ó–∂–∞</code>",
            parse_mode="HTML"
        )
        return ADDING_EXPENSE

async def show_statistics(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∏—Ç—Ä–∞—Ç"""
    try:
        session = Session()
        user_id = update.effective_user.id
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å
        current_month = datetime.now().strftime("%Y-%m")
        transactions = session.query(Transaction).filter(
            Transaction.user_id == user_id,
            Transaction.date.like(f"{current_month}%")
        ).all()

        if not transactions:
            await update.message.reply_text(
                "üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –∑–∞ —Ü–µ–π –º—ñ—Å—è—Ü—å.",
                reply_markup=build_budget_keyboard()
            )
            return BUDGET_MENU

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total = sum(t.amount for t in transactions)
        categories = {}
        for t in transactions:
            categories[t.category] = categories.get(t.category, 0) + t.amount

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        message = "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å:</b>\n\n"
        message += f"üíµ –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {total:.2f} –≥—Ä–Ω\n\n"
        message += "<b>–ó–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏:</b>\n"
        
        for category, amount in categories.items():
            percentage = (amount / total) * 100
            message += f"‚ñ™ {category.capitalize()}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"

        await update.message.reply_text(
            message,
            reply_markup=build_budget_keyboard(),
            parse_mode="HTML"
        )
        return BUDGET_MENU

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=build_budget_keyboard()
        )
        return BUDGET_MENU

async def budget_settings_start(update: Update, context: CallbackContext) -> int:
    """–ü–æ—á–∞—Ç–æ–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É"""
    await update.message.reply_text(
        "‚öô <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –ª—ñ–º—ñ—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "<code>–∫–∞—Ç–µ–≥–æ—Ä—ñ—è –ª—ñ–º—ñ—Ç</code>\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>—ó–∂–∞ 3000</code>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –ª—ñ–º—ñ—Ç–∏\n"
        "/cancel - —Å–∫–∞—Å—É–≤–∞—Ç–∏",
        parse_mode="HTML"
    )
    return SETTING_BUDGET

async def handle_budget_settings(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±—é–¥–∂–µ—Ç—É"""
    try:
        text = update.message.text
        
        if text.lower() == '/cancel':
            await update.message.reply_text(
                "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
                reply_markup=build_budget_keyboard()
            )
            return BUDGET_MENU
            
        if text.lower() == '/list':
            session = Session()
            budgets = session.query(Budget).filter(
                Budget.user_id == update.effective_user.id
            ).all()
            
            if not budgets:
                await update.message.reply_text(
                    "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö –ª—ñ–º—ñ—Ç—ñ–≤.",
                    reply_markup=build_budget_keyboard()
                )
                return SETTING_BUDGET
                
            message = "üìã <b>–í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –ª—ñ–º—ñ—Ç–∏:</b>\n"
            for budget in budgets:
                message += f"‚ñ™ {budget.category}: {budget.limit} –≥—Ä–Ω\n"
                
            await update.message.reply_text(
                message,
                reply_markup=build_budget_keyboard(),
                parse_mode="HTML"
            )
            return SETTING_BUDGET

        # –û–±—Ä–æ–±–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É
        category, limit = text.split(maxsplit=1)
        limit = float(limit)
        
        session = Session()
        budget = session.query(Budget).filter(
            Budget.user_id == update.effective_user.id,
            Budget.category == category.lower()
        ).first()
        
        if budget:
            budget.limit = limit
        else:
            budget = Budget(
                user_id=update.effective_user.id,
                category=category.lower(),
                limit=limit
            )
            session.add(budget)
        
        session.commit()
        
        await update.message.reply_text(
            f"‚úÖ –õ—ñ–º—ñ—Ç –¥–ª—è '{category}' –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {limit} –≥—Ä–Ω",
            reply_markup=build_budget_keyboard()
        )
        return BUDGET_MENU

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <code>—ó–∂–∞ 3000</code>",
            parse_mode="HTML"
        )
        return SETTING_BUDGET
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –±—é–¥–∂–µ—Ç—É: {e}")
        await update.message.reply_text(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=build_budget_keyboard()
        )
        return SETTING_BUDGET

async def cancel_budget(update: Update, context: CallbackContext) -> int:
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –∑ –±—é–¥–∂–µ—Ç–æ–º"""
    from main import build_main_keyboard
    await update.message.reply_text(
        "–†–æ–±–æ—Ç—É –∑ –±—é–¥–∂–µ—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?",
        reply_markup=build_main_keyboard()
    )
    return ConversationHandler.END

def setup(application: Application) -> None:
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –±—é–¥–∂–µ—Ç—É"""
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Text(["üí∞ –ë—é–¥–∂–µ—Ç"]), budget_start),
            CommandHandler("budget", budget_start)
        ],
        states={
            BUDGET_MENU: [
                MessageHandler(filters.Text(["‚ûï –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É"]), add_expense_start),
                MessageHandler(filters.Text(["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]), show_statistics),
                MessageHandler(filters.Text(["‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É"]), budget_settings_start),
                MessageHandler(filters.Text(["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]), cancel_budget)
            ],
            ADDING_EXPENSE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_expense)
            ],
            SETTING_BUDGET: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_budget_settings),
                CommandHandler("list", handle_budget_settings),
                CommandHandler("cancel", cancel_budget)
            ]
        },
        fallbacks=[
            MessageHandler(filters.Text(["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]), cancel_budget),
            CommandHandler("cancel", cancel_budget)
        ]
    )
    application.add_handler(conv_handler)