from aiogram import Router, types
from aiogram.filters import Command
from sqlalchemy.sql import text as sql_text
from datetime import datetime, timedelta
from database import Session
import matplotlib.pyplot as plt
import io
import os
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

analytics_router = Router()

def build_analytics_keyboard():
    keyboard = [
        [types.KeyboardButton(text="üìÖ –ó–∞ –º—ñ—Å—è—Ü—å"), types.KeyboardButton(text="üìÜ –ó–∞ —Ç–∏–∂–¥–µ–Ω—å")],
        [types.KeyboardButton(text="üìä –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"), types.KeyboardButton(text="üìà –ì—Ä–∞—Ñ—ñ–∫ –≤–∏—Ç—Ä–∞—Ç")],
        [types.KeyboardButton(text="üîç –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑"), types.KeyboardButton(text="üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É")]
    ]
    return types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

@analytics_router.message(Command("analytics"))
@analytics_router.message(lambda message: message.text == "üìä –ê–Ω–∞–ª—ñ–∑")
async def analytics_menu(message: types.Message):
    try:
        await message.answer(
            "üìä <b>–†–æ–∑–¥—ñ–ª –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏</b>\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–≤—ñ—Ç—É:",
            reply_markup=build_analytics_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in analytics_menu: {e}")
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏")

async def generate_monthly_report(user_id: int):
    try:
        session = Session()
        current_month = datetime.now().strftime("%Y-%m")
        
        transactions = session.execute(
            sql_text("""
                SELECT category, SUM(amount) as total 
                FROM transactions 
                WHERE user_id = :user_id AND strftime('%Y-%m', date) = :month 
                GROUP BY category
                ORDER BY total DESC
            """),
            {"user_id": user_id, "month": current_month}
        ).fetchall()

        if not transactions:
            return "üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –∑–∞ —Ü–µ–π –º—ñ—Å—è—Ü—å."

        total = sum(t.total for t in transactions)
        report = f"üìÖ <b>–í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ {current_month}:</b>\n\n"
        report += f"üíµ <b>–ó–∞–≥–∞–ª–æ–º:</b> {total:.2f} –≥—Ä–Ω\n\n"
        report += "<b>–†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º:</b>\n"
        
        for t in transactions:
            percentage = (t.total / total) * 100
            report += f"‚ñ™ {t.category.capitalize()}: {t.total:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"

        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –º—ñ—Å—è—Ü–µ–º
        prev_month = datetime.now().replace(day=1) - timedelta(days=1)
        prev_month_str = prev_month.strftime("%Y-%m")
        prev_total = session.execute(
            sql_text("""
                SELECT SUM(amount) as total 
                FROM transactions 
                WHERE user_id = :user_id AND strftime('%Y-%m', date) = :month
            """),
            {"user_id": user_id, "month": prev_month_str}
        ).fetchone().total or 0

        if prev_total:
            diff = total - prev_total
            if diff > 0:
                trend = f"üìà <b>+{abs(diff):.2f} –≥—Ä–Ω</b> vs {prev_month_str}"
            elif diff < 0:
                trend = f"üìâ <b>-{abs(diff):.2f} –≥—Ä–Ω</b> vs {prev_month_str}"
            else:
                trend = f"üìä <b>–ë–µ–∑ –∑–º—ñ–Ω</b> vs {prev_month_str}"
            
            report += f"\n{trend}"

        return report

    except Exception as e:
        logger.error(f"Error generating monthly report: {e}")
        return "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –∑–≤—ñ—Ç—É –∑–∞ –º—ñ—Å—è—Ü—å"

async def generate_weekly_report(user_id: int):
    try:
        session = Session()
        today = datetime.now()
        week_start = (today - timedelta(days=today.weekday())).strftime("%Y-%m-%d")
        
        transactions = session.execute(
            sql_text("""
                SELECT category, SUM(amount) as total 
                FROM transactions 
                WHERE user_id = :user_id AND date >= :week_start 
                GROUP BY category
                ORDER BY total DESC
            """),
            {"user_id": user_id, "week_start": week_start}
        ).fetchall()

        if not transactions:
            return "üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –∑–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å."

        total = sum(t.total for t in transactions)
        report = f"üìÜ <b>–í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å (–∑ {week_start}):</b>\n\n"
        report += f"üíµ <b>–ó–∞–≥–∞–ª–æ–º:</b> {total:.2f} –≥—Ä–Ω\n\n"
        report += "<b>–†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º:</b>\n"
        
        for t in transactions:
            percentage = (t.total / total) * 100
            report += f"‚ñ™ {t.category.capitalize()}: {t.total:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"

        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
        avg_daily = total / (today.weekday() + 1)
        report += f"\nüìå <b>–°–µ—Ä–µ–¥–Ω—å–æ–¥–µ–Ω–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏:</b> {avg_daily:.2f} –≥—Ä–Ω"

        return report

    except Exception as e:
        logger.error(f"Error generating weekly report: {e}")
        return "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –∑–≤—ñ—Ç—É –∑–∞ —Ç–∏–∂–¥–µ–Ω—å"

async def generate_category_report(user_id: int):
    try:
        session = Session()
        
        categories = session.execute(
            sql_text("""
                SELECT category, SUM(amount) as total 
                FROM transactions 
                WHERE user_id = :user_id 
                GROUP BY category
                ORDER BY total DESC
                LIMIT 10
            """),
            {"user_id": user_id}
        ).fetchall()

        if not categories:
            return "üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –∑–∞ –∂–æ–¥–Ω–æ—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é."

        total_all = session.execute(
            sql_text("SELECT SUM(amount) FROM transactions WHERE user_id = :user_id"),
            {"user_id": user_id}
        ).fetchone()[0] or 0

        report = "üìä <b>–¢–æ–ø-10 –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑–∞ –≤–µ—Å—å —á–∞—Å:</b>\n\n"
        
        for i, cat in enumerate(categories, 1):
            percentage = (cat.total / total_all) * 100
            report += f"{i}. {cat.category.capitalize()}: {cat.total:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"

        report += f"\nüí≥ <b>–í—Å—å–æ–≥–æ –≤–∏—Ç—Ä–∞—á–µ–Ω–æ:</b> {total_all:.2f} –≥—Ä–Ω"
        return report

    except Exception as e:
        logger.error(f"Error generating category report: {e}")
        return "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –∑–≤—ñ—Ç—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º"

async def generate_expenses_chart(user_id: int):
    try:
        session = Session()
        
        months_data = session.execute(
            sql_text("""
                SELECT strftime('%Y-%m', date) as month, SUM(amount) as total
                FROM transactions
                WHERE user_id = :user_id
                GROUP BY month
                ORDER BY month DESC
                LIMIT 6
            """),
            {"user_id": user_id}
        ).fetchall()

        if not months_data or len(months_data) < 2:
            return None

        months = [m.month[-2:] + '/' + m.month[2:4] for m in reversed(months_data)]
        amounts = [m.total for m in reversed(months_data)]

        plt.style.use('seaborn')
        fig, ax = plt.subplots(figsize=(10, 6))
        
        bars = ax.bar(months, amounts, color=['#4CAF50', '#2196F3', '#FFC107', '#FF5722', '#9C27B0', '#607D8B'])
        
        ax.set_title('–î–∏–Ω–∞–º—ñ–∫–∞ –≤–∏—Ç—Ä–∞—Ç –ø–æ –º—ñ—Å—è—Ü—è–º', pad=20, fontsize=14, fontweight='bold')
        ax.set_xlabel('–ú—ñ—Å—è—Ü—å', labelpad=10)
        ax.set_ylabel('–°—É–º–∞ (–≥—Ä–Ω)', labelpad=10)
        ax.grid(axis='y', linestyle='--', alpha=0.7)
        
        # –î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ–≤–ø—Ü—ñ
        for bar in bars:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height,
                    f'{height:.0f}',
                    ha='center', va='bottom', fontsize=10)
        
        plt.tight_layout()
        
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=80, bbox_inches='tight')
        buffer.seek(0)
        plt.close()
        
        return buffer

    except Exception as e:
        logger.error(f"Error generating chart: {e}")
        return None

async def generate_detailed_analysis(user_id: int):
    try:
        session = Session()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        total_spent = session.execute(
            sql_text("SELECT SUM(amount) FROM transactions WHERE user_id = :user_id"),
            {"user_id": user_id}
        ).fetchone()[0] or 0

        avg_monthly = session.execute(
            sql_text("""
                SELECT AVG(month_total) FROM (
                    SELECT strftime('%Y-%m', date) as month, SUM(amount) as month_total
                    FROM transactions
                    WHERE user_id = :user_id
                    GROUP BY month
                )
            """),
            {"user_id": user_id}
        ).fetchone()[0] or 0

        most_expensive_category = session.execute(
            sql_text("""
                SELECT category, SUM(amount) as total
                FROM transactions
                WHERE user_id = :user_id
                GROUP BY category
                ORDER BY total DESC
                LIMIT 1
            """),
            {"user_id": user_id}
        ).fetchone()

        analysis = "üîç <b>–î–µ—Ç–∞–ª—å–Ω–∏–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑:</b>\n\n"
        analysis += f"üí∏ <b>–í—Å—å–æ–≥–æ –≤–∏—Ç—Ä–∞—á–µ–Ω–æ:</b> {total_spent:.2f} –≥—Ä–Ω\n"
        analysis += f"üìÜ <b>–°–µ—Ä–µ–¥–Ω—å–æ–º—ñ—Å—è—á–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏:</b> {avg_monthly:.2f} –≥—Ä–Ω\n"
        
        if most_expensive_category:
            analysis += f"üèÜ <b>–ù–∞–π–≤–∏—Ç—Ä–∞—Ç–Ω—ñ—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {most_expensive_category[0].capitalize()} ({most_expensive_category[1]:.2f} –≥—Ä–Ω)\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö
        if avg_monthly > 15000:
            analysis += "\nüí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:</b> –í–∞—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –≤–∏—â–µ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ. –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±—é–¥–∂–µ—Ç."
        elif avg_monthly < 5000:
            analysis += "\nüí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:</b> –í–∏ –¥–æ–±—Ä–µ –∫–æ–Ω—Ç—Ä–æ–ª—é—î—Ç–µ –≤–∏—Ç—Ä–∞—Ç–∏! –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ."
        else:
            analysis += "\nüí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:</b> –í–∞—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º—É —Ä—ñ–≤–Ω—ñ."

        return analysis

    except Exception as e:
        logger.error(f"Error generating detailed analysis: {e}")
        return "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É"

@analytics_router.message(lambda message: message.text == "üìÖ –ó–∞ –º—ñ—Å—è—Ü—å")
async def monthly_report(message: types.Message):
    report = await generate_monthly_report(message.from_user.id)
    await message.answer(report, parse_mode="HTML", reply_markup=build_analytics_keyboard())

@analytics_router.message(lambda message: message.text == "üìÜ –ó–∞ —Ç–∏–∂–¥–µ–Ω—å")
async def weekly_report(message: types.Message):
    report = await generate_weekly_report(message.from_user.id)
    await message.answer(report, parse_mode="HTML", reply_markup=build_analytics_keyboard())

@analytics_router.message(lambda message: message.text == "üìä –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
async def categories_report(message: types.Message):
    report = await generate_category_report(message.from_user.id)
    await message.answer(report, parse_mode="HTML", reply_markup=build_analytics_keyboard())

@analytics_router.message(lambda message: message.text == "üìà –ì—Ä–∞—Ñ—ñ–∫ –≤–∏—Ç—Ä–∞—Ç")
async def expenses_chart(message: types.Message):
    chart = await generate_expenses_chart(message.from_user.id)
    if chart:
        await message.answer_photo(
            photo=chart,
            caption="üìà <b>–î–∏–Ω–∞–º—ñ–∫–∞ –≤–∞—à–∏—Ö –≤–∏—Ç—Ä–∞—Ç</b>",
            parse_mode="HTML",
            reply_markup=build_analytics_keyboard()
        )
    else:
        await message.answer(
            "üì≠ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞. –ü–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 2 –º—ñ—Å—è—Ü—ñ –¥–∞–Ω–∏—Ö.",
            reply_markup=build_analytics_keyboard()
        )

@analytics_router.message(lambda message: message.text == "üîç –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑")
async def detailed_analysis(message: types.Message):
    analysis = await generate_detailed_analysis(message.from_user.id)
    await message.answer(analysis, parse_mode="HTML", reply_markup=build_analytics_keyboard())

@analytics_router.message(lambda message: message.text == "üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É")
async def back_to_main(message: types.Message):
    from main import build_main_keyboard
    await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=build_main_keyboard())